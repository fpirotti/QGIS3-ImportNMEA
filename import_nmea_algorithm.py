# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ImportNMEA
                                 A QGIS plugin
 Lets you read NMEA ASCII files and import points and attributes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-17
        copyright            : (C) 2021 by Francesco Pirotti University of Padova
        email                : francesco.pirotti@unipd.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Pirotti University of Padova'
__date__ = '2021-07-17'
__copyright__ = '(C) 2021 by Francesco Pirotti, University of Padova'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


import os
import inspect
from qgis.PyQt.QtGui import QIcon

from qgis.PyQt.QtCore import (QCoreApplication, 
                                QVariant)
from qgis.core import *

from qgis.utils import *
import time,os,string,math


class ImportNMEAAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
  
    OUTPUT_DOPS = 'OUTPUT_DOPS'
    OUTPUT_COORDINATES = 'OUTPUT_COORDINATES'
    OUTPUT_TIME = 'OUTPUT_TIME'
    OUTPUT_VERBOSE = 'OUTPUT_TIME'
    OUTPUT_GGA = 'OUTPUT_GGA'
    OUTPUT_GLL = 'OUTPUT_GLL'
    OUTPUT_RMC = 'OUTPUT_RMC'
   

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
 
        self.canvas = iface.mapCanvas()
        self.addParameter(QgsProcessingParameterFile(self.INPUT, self.tr('Input NMEA file'),
                                                     0))
        self.addParameter(QgsProcessingParameterBoolean(self.OUTPUT_GGA,
                                                        self.tr('Read $GPGGA sentence'),
                                                        True, True))
        self.addParameter(QgsProcessingParameterBoolean(self.OUTPUT_GLL,
                                                        self.tr('Read $GPGLL sentence'),
                                                        False, True))
        self.addParameter(QgsProcessingParameterBoolean(self.OUTPUT_RMC,
                                                        self.tr('Read $GPRMC sentence'),
                                                        False, True))

        self.addParameter(QgsProcessingParameterBoolean(self.OUTPUT_VERBOSE,
                                                        self.tr('Super Verbose (slow if many points)'),
                                                        False, True))
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        #self.addParameter(
        #    QgsProcessingParameterFeatureSink(
        #        self.OUTPUT,
        #        self.tr('Output layer')
        #    )
        #)

    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'logo.png')))
        return icon

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        self.feedback = feedback
        self.utc=[]
        self.lat=[]
        self.lon=[]
        self.numSV=[]
        self.hdop=[]
        self.msl=[]
        self.geoid=[]
        self.speed=[]
        self.fixstatus=[]
        self.datastatus=[]
        self.message=[]

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.  
        input_file = self.parameterAsFile(parameters, self.INPUT, context)
        dest_id = self.parameterAsFileOutput(parameters, self.OUTPUT, context)
        self.verbose = self.parameterAsBoolean(parameters, self.OUTPUT_VERBOSE, context)
        self.sentences = {}
        self.gll = self.parameterAsBoolean(parameters, self.OUTPUT_GLL, context)
        self.gga = self.parameterAsBoolean(parameters, self.OUTPUT_GGA, context)
        self.rmc = self.parameterAsBoolean(parameters, self.OUTPUT_RMC, context)
        if self.gll is True:
            self.sentences['GLL']="GLL"
        if self.gga is True:
            self.sentences['GGA']="GGA" 
        if self.rmc is True:
            self.sentences['RMC']="RMC" 
 
        f = open(input_file)
        num_lines = sum(1 for line in f)
        f.close()
        self.Qpr_inst = QgsProject.instance()

        parser={'GGA':self.par_gga,'RMC':self.par_rmc,'GLL':self.par_gll}
        self.nmeadict={}
        with open(input_file) as f:
            prev_track_point = None
            prev_track_point_index = -1
            i=0 
            every = int(math.floor( float(num_lines) / 100 ))
            if every == 0:
                every = 1
            percent = 0 
            feedback.pushInfo('Number of lines in NMEA:'+str(num_lines))
            for line in f:
                if feedback.isCanceled():
                    break 
                i=i+1 
                if(i%every==0.0): 
                    percent = percent + 1
                    feedback.setProgress(int(percent)) 

                sentence = line[17:20]

                if sentence in self.sentences:
                    try:
                        parserF=parser[sentence]
                        keyy = parserF(line)
                        self.message.append(sentence)
                        #feedback.pushInfo(keyy)
                    except Exception as e:  
                        feedback.reportError( "Problem parsing line:  "+line + " Error: "+e,  True) 
                        break

                    self.utc.append(self.nmeadict[keyy][0])
                    self.numSV.append((self.nmeadict[keyy][3]))
                    self.hdop.append((self.nmeadict[keyy][4]))

                    self.lon.append(self.nmeadict[keyy][2])
                    self.lat.append(self.nmeadict[keyy][1])
                    self.msl.append((self.nmeadict[keyy][5]))
                    self.geoid.append((self.nmeadict[keyy][6]))
                    self.speed.append((self.nmeadict[keyy][7]))

                    self.fixstatus.append((self.nmeadict[keyy][9]))
                    self.datastatus.append(self.nmeadict[keyy][10])
                     
                    if self.verbose is True:
                        feedback.pushInfo(keyy)
                        feedback.pushInfo("LAT="+str(self.nmeadict[keyy][1]))
                        feedback.pushInfo("LONG="+str(self.nmeadict[keyy][2]))
                        
        #for keyy in self.nmeadict.keys():
            #feedback.pushInfo(self.nmeadict[keyy][0]) 

        f.close()
        dest_id = self.addLayer(input_file, feedback)

        self.layerNMEA = dest_id
        try:
            layername=os.path.basename(str(input_file))
        except:
            layername="nmealayer"


        feedback.pushInfo(layername +"----------------")

        #QgsProject.instance().addMapLayer(dest_id)
        feedback.pushInfo(str(dest_id.extent()))
        #self.canvas.zoomToFeatureExtent( dest_id.extent() )
        vLayer = iface.activeLayer() 
        extent = dest_id.extent()

        sourceCrs = QgsCoordinateReferenceSystem(4326) 
        tr = QgsCoordinateTransform(sourceCrs, QgsProject.instance().crs(), QgsProject.instance())

        extent = tr.transformBoundingBox(extent)

        self.canvas.setExtent(extent)
          

        #g = self.Qpr_inst.layerTreeRoot().insertGroup(0, layername)
        self.Qpr_inst.addMapLayer(self.layerNMEA, True)
        #nn = QgsLayerTreeLayer(self.layerNMEA)
        #g.insertChildNode(0, nn)
        if self.canvas.isCachingEnabled():
            self.layerNMEA.triggerRepaint()
        else:
            self.canvas.refresh() 
 
        return { }

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Import NMEA'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vector Layers'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ImportNMEAAlgorithm()


    def par_gga(self,line):
        if self.verbose is True:
            self.feedback.pushInfo("Reading GGA") 
        data=[]
        data=line.split(',')
        key=data[0]
        utc=data[2][:2]+':'+data[2][2:4]+':'+data[2][4:6]
        if data[4]=='N':
            latt=float(data[3][:2])+float(data[3][2:])/60
        elif data[4]=='S':
            latt=-1*float(data[3][:2])+float(data[3][2:])/60
        else:
            latt=NULL
        ind=str.find(data[5],".")
        if data[6]=='E':
            lonn=float(data[5][:(ind-2)])+float(data[5][(ind-2):])/60
        elif data[6]=='W':
            lonn=-1*float(data[5][:(ind-2)])+float(data[5][(ind-2):])/60
        else:
            lonn=NULL
        try:    numsv=float(data[8])
        except: numsv=NULL
        try:    hdop=float(data[9])
        except: hdop=NULL
        try:    msl=float(data[10])
        except: msl=NULL
        try:    geoid=float(data[12])
        except: geoid=NULL
        try:    fixstatus=float(data[7])
        except: fixstatus=NULL
        self.nmeadict[key]=[ utc,latt,lonn,numsv,hdop,msl,geoid, NULL, NULL,fixstatus, NULL ]

        return key

    def par_rmc(self,line):
        if self.verbose is True:
            self.feedback.pushInfo("Reading RMC") 
        data=[]
        data=line.split(',')
        key=data[0]
        utc=data[2][:2]+':'+data[2][2:4]+':'+data[2][4:6]
        if data[5]=='N':
            latt=float(data[4][:2])+float(data[4][2:])/60
        elif data[5]=="S":
            latt=-1*float(data[4][:2])+float(data[4][2:])/60
        else:
            latt=NULL
        ind=str.find(data[6],".")
        if data[7]=='E':
            lonn=float(data[6][:(ind-2)])+float(data[6][(ind-2):])/60
        elif data[7]=='W':
            lonn=-1*float(data[6][:(ind-2)])+float(data[6][(ind-2):])/60
        else:
            lonn=NULL
        try:    speed=float(data[8])
        except: speed=NULL
        try:
            if data[3]=='A':    datastatus=1
            else:   datastatus=0
        except: datastatus=NULL

        self.nmeadict[key]=[ utc,latt,lonn,NULL,NULL,NULL,NULL, speed, NULL, NULL, datastatus ]
 
        return key

    def par_gll(self,line):
        if self.verbose is True:
            self.feedback.pushInfo("Reading GLL") 
        data=[]
        data=line.split(',')
        key=data[0]
        utc=data[6][:2]+':'+data[6][2:4]+':'+data[6][4:6]
        if data[3]=='N':
            latt=float(data[2][:2])+float(data[2][2:])/60
        elif data[3]=='S':
            latt=-1*float(data[2][:2])+float(data[2][2:])/60
        else:
            latt=NULL
        ind=str.find(data[4],".")
        if data[5]=='E':
            lonn=float(data[4][:(ind-2)])+float(data[4][(ind-2):])/60
        elif data[5]=='W':
            lonn=-1*float(data[4][:(ind-2)])+float(data[4][(ind-2):])/60
        else:
            lonn=NULL
        try:
            if data[7]=='A':    datastatus=1
            else:   datastatus=0
        except: datastatus=NULL

        self.nmeadict[key]=[ utc,latt,lonn,NULL,NULL,NULL,NULL, NULL, NULL,NULL, datastatus ]
 
        return key




    def addLayer(self,filename, feedback): 
        try:
            layername=os.path.basename(str(filename))
        except:
            layername="nmealayer"
 
        self.epsg4326= QgsCoordinateReferenceSystem(4326) 
        #self.epsg4326.createFromProj4("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
        nmealayer = QgsVectorLayer("Point?crs=epsg:4326", layername, "memory")
        nmealayer.startEditing()

        pr = nmealayer.dataProvider()
        att=[]
        a=0
        pr.addAttributes( [ QgsField("latitude", QVariant.Double)] )
        att.append(self.lat) 
        pr.addAttributes( [ QgsField("longitude", QVariant.Double)] )
        att.append(self.lon)
        a+=2
        pr.addAttributes( [ QgsField("utc", QVariant.String)] )
        att.append(self.utc)
        a+=1

        pr.addAttributes( [ QgsField("numSV", QVariant.Double)] )
        att.append(self.numSV)
        a+=1
        pr.addAttributes( [ QgsField("hdop", QVariant.Double)] )
        att.append(self.hdop)
        a+=1
        pr.addAttributes( [ QgsField("msl", QVariant.Double)] )
        att.append(self.msl)
        a+=1
        pr.addAttributes( [ QgsField("geoid", QVariant.Double)] )
        att.append(self.geoid)
        a+=1
        pr.addAttributes( [ QgsField("speed", QVariant.Double)] )
        att.append(self.speed) 
        pr.addAttributes( [ QgsField("fixstatus", QVariant.Double)] )
        att.append(self.fixstatus) 
        pr.addAttributes( [ QgsField("datastatus", QVariant.Double)] )
        att.append(self.datastatus) 
        pr.addAttributes( [ QgsField("message", QVariant.String)] )
        att.append(self.message) 

        nmealayer.updateFields()

        fett=[]
        for a,lat in enumerate(self.lat):
            fet = QgsFeature()
            fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(self.lon[a],lat)))
            attributess=[]
            for aa in att:
                attributess.append(aa[a])
            fet.setAttributes(attributess)
            fett.append(fet)


        pr.addFeatures(fett)

        nmealayer.commitChanges()
        nmealayer.updateExtents()

        if not nmealayer.isValid():
            feedback.reportError( "Layer failed to load: Layer name = "+layername,  True )
        
        return nmealayer

        #self.iface.mapCanvas().zoomToFullExtent()
