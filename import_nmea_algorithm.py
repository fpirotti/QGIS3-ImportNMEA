# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ImportNMEA
                                 A QGIS plugin
 Lets you read NMEA ASCII files and import points and attributes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-17
        copyright            : (C) 2021 by Francesco Pirotti University of Padova
        email                : francesco.pirotti@unipd.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francesco Pirotti University of Padova'
__date__ = '2021-07-17'
__copyright__ = '(C) 2021 by Francesco Pirotti, University of Padova'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       Qgis,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsMessageLog,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterFile)

from qgis.utils import iface

class ImportNMEAAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
  
    OUTPUT_DOPS = 'OUTPUT_DOPS'
    OUTPUT_TRACK_COUNT = 'OUTPUT_TRACK_COUNT'
 
    def parse_b_record(self, b_record):
        """
        https://xp-soaring.github.io/igc_file_format/igc_format_2008.html#link_B
        """

        definitions = []

        # https://xp-soaring.github.io/igc_file_format/igc_format_2008.html#link_FXA
        # only the first 35 bytes are recognized
        if b_record[0] != "B" or len(b_record) < 36: # 35 + \n
            # not a b record
            return None
        time_utc = b_record[1:7]
        latitude_str = b_record[7:15-1] # last is N for north / S for Sud
        latitude_sign = b_record[14]
        latitude = float(latitude_str[0:2]) + (float(latitude_str[2:4]) + float(latitude_str[4:7]) / 1000) / 60
        if latitude_sign == "S":
            latitude *= -1
        longitude_str = b_record[15:24-1] # last is E for East/ O for Ovest
        longitude_sign = b_record[23]
        longitude = float(longitude_str[0:3]) + (float(longitude_str[3:5]) + float(longitude_str[5:8]) / 1000) / 60
        if longitude_sign == "O":
            longitude *= -1
        fix_validity = b_record[24]
        press_alt = int(b_record[25:30])
        gnss_alt = int(b_record[30:35])

        return {"time_utc": time_utc, 
                "lat": latitude, 
                "lon":longitude, 
                "fix_validity":fix_validity, 
                "press_alt":press_alt, 
                "gnss_alt":gnss_alt}


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
 
        self.addParameter(QgsProcessingParameterFile(self.INPUT, self.tr('Input NMEA file'),
                                                     0))
        self.addParameter(QgsProcessingParameterBoolean(self.OUTPUT_DOPS,
                                                        self.tr('Import DOPs if available'),
                                                        True, True))
        self.addParameter(QgsProcessingParameterBoolean(self.OUTPUT_DOPS,
                                                        self.tr('Import DOPs if available'),
                                                        True, True))
        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.  
        input_file = self.parameterAsFile(parameters, self.INPUT, context)
        num_lines = sum(1 for line in open(input_file))
        with open(input_file) as f:
            prev_track_point = None
            prev_track_point_index = -1
            i=0
            QgsMessageLog.logMessage( str(num_lines), level=Qgis.Info )
            for line in f:
                #track_point = self.parse_b_record(line)
                i=i+1
                percent = i / float(num_lines) * 100
                # iface.mainWindow().statusBar().showMessage("Processed {} %".format(int(percent)))
                iface.statusBarIface().showMessage("Processed {} %".format(int(percent)))
  
 
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Import NMEA'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vector Layers'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ImportNMEAAlgorithm()


    def par_gga(self,line):
        data=[]
        data=line.split(',')
        key=data[1]
        utc=data[1][:2]+':'+data[1][2:4]+':'+data[1][4:6]
        if data[3]=='N':
            latt=float(data[2][:2])+float(data[2][2:])/60
        elif data[3]=='S':
            latt=-1*float(data[2][:2])+float(data[2][2:])/60
        else:
            latt=self.nl
        ind=string.find(data[4],".")
        if data[5]=='E':
            lonn=float(data[4][:(ind-2)])+float(data[4][(ind-2):])/60
        elif data[5]=='W':
            lonn=-1*float(data[4][:(ind-2)])+float(data[4][(ind-2):])/60
        else:
            lonn=self.nl
        try:    numsv=float(data[7])
        except: numsv=self.nl
        try:    hdop=float(data[8])
        except: hdop=self.nl
        try:    msl=float(data[9])
        except: msl=self.nl
        try:    geoid=float(data[11])
        except: geoid=self.nl
        try:    fixstatus=float(data[6])
        except: fixstatus=self.nl

        self.nmeadict[key][0]=utc
        self.nmeadict[key][1]=latt
        self.nmeadict[key][2]=lonn
        self.nmeadict[key][3]=numsv
        self.nmeadict[key][4]=hdop
        self.nmeadict[key][5]=msl
        self.nmeadict[key][6]=geoid
        self.nmeadict[key][9]=fixstatus

    def par_rmc(self,line):
        data=[]
        data=line.split(',')
        key=data[1]
        utc=data[1][:2]+':'+data[1][2:4]+':'+data[1][4:6]
        if data[4]=='N':
            latt=float(data[3][:2])+float(data[3][2:])/60
        elif data[4]=="S":
            latt=-1*float(data[3][:2])+float(data[3][2:])/60
        else:
            latt=self.nl
        ind=string.find(data[5],".")
        if data[6]=='E':
            lonn=float(data[5][:(ind-2)])+float(data[5][(ind-2):])/60
        elif data[6]=='W':
            lonn=-1*float(data[5][:(ind-2)])+float(data[5][(ind-2):])/60
        else:
            lonn=self.nl
        try:    speed=float(data[7])
        except: speed=self.nl
        try:
            if data[2]=='A':    datastatus=1
            else:   datastatus=0
        except: datastatus=self.nl

        self.nmeadict[key][0]=utc
        self.nmeadict[key][1]=latt
        self.nmeadict[key][2]=lonn
        self.nmeadict[key][7]=speed
        self.nmeadict[key][10]=datastatus

    def par_gll(self,line):
        data=[]
        data=line.split(',')
        key=data[5]
        utc=data[5][:2]+':'+data[5][2:4]+':'+data[5][4:6]
        if data[2]=='N':
            latt=float(data[1][:2])+float(data[1][2:])/60
        elif data[2]=='S':
            latt=-1*float(data[1][:2])+float(data[1][2:])/60
        else:
            latt=self.nl
        ind=string.find(data[3],".")
        if data[4]=='E':
            lonn=float(data[3][:(ind-2)])+float(data[3][(ind-2):])/60
        elif data[4]=='W':
            lonn=-1*float(data[3][:(ind-2)])+float(data[3][(ind-2):])/60
        else:
            lonn=self.nl
        try:
            if data[6]=='A':    datastatus=1
            else:   datastatus=0
        except: datastatus=self.nl

        self.nmeadict[key][0]=utc
        self.nmeadict[key][1]=latt
        self.nmeadict[key][2]=lonn
        self.nmeadict[key][10]=datastatus




    def addSave(self,filename):
        import os
        try:
            layername=os.path.basename(str(filename))

        except:
            layername="nmealayer"


        self.epsg4326= QgsCoordinateReferenceSystem()
        self.epsg4326.createFromString("epsg:4326")
        nmealayer = QgsVectorLayer("Point?crs=epsg:4326", layername, "memory")
        nmealayer.startEditing()

        pr = nmealayer.dataProvider()
        att=[]
        a=0
        if self.dlg3.ui.latCheck.isChecked():
               pr.addAttributes( [ QgsField("latitude", QVariant.Double)] )
               att.append(self.lat)
               a+=1
        if self.dlg3.ui.lonCheck.isChecked():
               pr.addAttributes( [ QgsField("longitude", QVariant.Double)] )
               att.append(self.lon)
               a+=1
        if self.dlg3.ui.utcCheck.isChecked():
               pr.addAttributes( [ QgsField("utc", QVariant.String)] )
               att.append(self.utc)
               a+=1
        if self.dlg3.ui.svCheck.isChecked():
               pr.addAttributes( [ QgsField("numSV", QVariant.Double)] )
               att.append(self.numSV)
               a+=1
        if self.dlg3.ui.hdopCheck.isChecked():
               pr.addAttributes( [ QgsField("hdop", QVariant.Double)] )
               att.append(self.hdop)
               a+=1
        if self.dlg3.ui.mslCheck.isChecked():
               pr.addAttributes( [ QgsField("msl", QVariant.Double)] )
               att.append(self.msl)
               a+=1
        if self.dlg3.ui.geoidCheck.isChecked():
               pr.addAttributes( [ QgsField("geoid", QVariant.Double)] )
               att.append(self.geoid)
               a+=1
        if self.dlg3.ui.speedCheck.isChecked():
               pr.addAttributes( [ QgsField("speed", QVariant.Double)] )
               att.append(self.speed)
               a+=1
        if self.dlg3.ui.fixstatusCheck.isChecked():
               pr.addAttributes( [ QgsField("fixstatus", QVariant.Double)] )
               att.append(self.fixstatus)
               a+=1
        if self.dlg3.ui.datastatusCheck.isChecked():
               pr.addAttributes( [ QgsField("datastatus", QVariant.Double)] )
               att.append(self.datastatus)
               a+=1



        fett=[]
        for a,lat in enumerate(self.lat):
            fet = QgsFeature()
            fet.setGeometry(QgsGeometry.fromPoint(QgsPoint(self.lon[a],lat)))
            attributess=[]
            for aa in att:
                attributess.append(aa[a])
            fet.setAttributes(attributess)
            fett.append(fet)


        pr.addFeatures(fett)

        nmealayer.commitChanges()
        nmealayer.updateExtents()
        QgsProject.instance().addMapLayer(nmealayer)

        self.iface.mapCanvas().zoomToFullExtent()
